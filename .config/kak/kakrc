source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload
plug "alexherbo2/auto-pairs.kak"
plug "danr/kakoune-easymotion"
plug "occivink/kakoune-gdb"
plug "occivink/kakoune-sudo-write"
plug "insipx/kak-crosshairs"
#plug "Bodhizafa/kak-rainbow" # Kind of confusing...
plug "andreyorst/fzf.kak" config %{
    map -docstring 'fzf mode' global normal '<c-p>' ': fzf-mode<ret>'
} defer 'fzf-file' %{
    set-option global fzf_file_command 'fd -HI'
} defer 'fzf-grep' %{
    set-option global fzf_grep_command 'rg'
}
plug "eraserhd/parinfer-rust" do %{
    cargo install --force --path .
    cargo clean
} config %{
    hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
        parinfer-enable-window -smart
    }
}
plug "andreyorst/powerline.kak" config %{
    powerline-start
}
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}
eval %sh{kak-lsp --kakoune -s $kak_session}
#set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log" # kak-lsp debug

# All files
hook global WinSetOption filetype(.*) %{
    map global user p -docstring 'paste from clipboard' '<a-!>xsel --output --clipboard<ret>'
    map global user w -docstring 'easy-motion (word)' ': easy-motion-w<ret>'
    map global user W -docstring 'easy-motion (WORD)' ': easy-motion-W<ret>'
    map global user l -docstring 'easy-motion (line)' ': easy-motion-line<ret>'
    map global user < -docstring 'previous buffer' ': buffer-previous<ret>'
    map global user > -docstring 'next buffer' ': buffer-next<ret>'
    map global user d -docstring 'delete buffer' ': delete-buffer<ret>'
    map global user D -docstring 'force delete buffer' ': delete-buffer!<ret>'
    map global user . -docstring 'save-all-buffers' ': write-all<ret>'
    map global user / -docstring 'comment-line' ': comment-line<ret>'
    map global user f -docstring 'copy file path' 'nop %sh{ xclip -se c $kak_buffile }'
    map global user o -docstring 'list file symbols' ': lsp-document-symbol'
}

# hook global NormalKey y %{ nop %sh{
#     printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
# }}

# LSP enabled languages
hook global WinSetOption filetype=(rust|javascript|typescript|tsx|deno|vue|c|cpp) %{
    lsp-enable-window
    lsp-auto-hover-enable
    #rainbow-enable-window
    enable-auto-pairs
    #add-highlighter global/ number-lines
    set-option window ui_options ncurses_assistant=off
    map window user e -docstring 'next error (lsp)' ': lsp-find-error<ret>'
    map window user , -docstring 'code-actions' ': lsp-code-actions<ret>'
    map window user r -docstring 'refactor' ': lsp-rename-prompt<ret>'
    map window user L -docstring 'lint' ': lint<ret>'
    map window user F -docstring 'format' ': format<ret>'
    set-option window indentwidth 2
    set-option window tabstop 2
    git show-diff
    hook buffer -always BufWritePost .* 'git update-diff'
}

# Language specific
hook global WinSetOption filetype=(c|cpp|rust) %{
    declare-user-mode gdb
    map global gdb b -docstring 'gdb-set-breakpoint' ': gdb-set-breakpoint<ret>'
    map global gdb B -docstring 'gdb-clear-breakpoint' ': gdb-clear-breakpoint<ret>'
    map global gdb c -docstring 'gdb-continue-or-run' ': gdb-continue-or-run<ret>'
    map global gdb n -docstring 'gdb-session-new' ':gdb-session-new --eval-command "file $GDB_FILE" --eval-command "break $GDB_ENTRY_FUNCTION" --eval-command "run" <ret>'
    map global gdb N -docstring 'gdb-session-stop' ': gdb-session-stop<ret>'
    map global gdb p -docstring 'gdb-print' ': gdb-print<ret>'
    map global user g -docstring 'gdb' ': enter-user-mode gdb<ret>'
}

hook global WinSetOption filetype=(c|cpp) %{
    set-option buffer formatcmd 'clang-format --style=Google'
    hook buffer -group format BufWritePre .* format
    hook buffer -group build BufWritePost .*.(c|cpp) 'nop %sh{ ./build.sh }'
}

hook global WinSetOption filetype=rust %{
    set-option buffer gdb_program 'rust-gdb'
    set-option buffer formatcmd 'rustfmt'
    hook buffer -group format BufWritePre .* format
    hook buffer -group build BufWritePost .*.(rs) 'nop %sh{ cargo build }'
}


hook global WinSetOption filetype=terraform %{
    set-option buffer formatcmd 'terraform fmt -'
    hook buffer -group format BufWritePre .* format
}

